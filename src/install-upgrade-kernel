#!/bin/bash
# Gettext internationalization
#
# Copyright 2022-2024 Dimitris Tzemos, GR
#!/bin/bash
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
########################################### #######################
####                      install-upgrade-kernel               ####
###################################################################
# script to install/upgrade new kernel images                     #
# when kernel upgrade on repos                                    #
# when installing/upgrading generic kernel an initrd is created   #
# This script created for slackel/salix                           #
#                                                                 #
###################################################################

AUTHOR='Dimitris Tzemos - dijemos@gmail.com'
LICENCE='GPL v3+'
SCRIPT=$(basename "$0")
SCRIPT=$(readlink -f "$SCRIPT")
VER=4.0

init(){

		if [ "$UID" != "0" ]; then
			echo "You need to be root to run this"
			exit 1
		fi

        # Translations only work with utf8 locales
        if [ ! `echo $LANG | grep -i utf` ]; then
			LANG=C
        fi

        # Gettext internationalization
        export TEXTDOMAIN="install-upgrade-kernel"
        export TEXTDOMAINDIR="/usr/share/locale"
        . gettext.sh

        # Path needs to be extended in case you're only half a root :)
        export PATH="/usr/sbin:/sbin:${PATH}"
}

usage(){
        echo "`eval_gettext 'USAGE: install-upgrade-kernel [install|upgrade] [generic]'`"
        echo
        echo "`eval_gettext '   OPTIONS:'`"
        echo "`eval_gettext '   install  Install generic kernel'`"
        echo "`eval_gettext '   upgrade  Upgrade generic kernel removing the old one'`"
        echo "`eval_gettext '   generic  Download generic kernel and also create an initrd'`"
        exit 1
}

# Check which options are used from the command line
checkoptions(){
        flag=$1
        flagr=$2

		if [ $# -gt 2 ] ; then
				echo "`eval_gettext 'ERROR: Too many arguments'`"
				usage
		fi

        if [[ $flag = "install" ]]; then
			export flag="install"
        elif [[ $flag = "upgrade" ]]; then
			export flag="upgrade"
		else
		   usage
        fi

        #if switch is unknown or if asking for help
		if [[ $flagr = "help" ]] || [[ $flag = "h" ]]; then
			usage
	    elif [[ $flagr = "generic" ]]; then
			export flagr="generic"
		else
			usage
		fi
}
execute_script(){
if [ -z "$startdir" ]; then
	startdir="$(pwd)"
	export startdir
fi

#moduleslist="squashfs:overlay:loop:xhci-pci:ohci-pci:ehci-pci:xhci-hcd:uhci-hcd:ehci-hcd:mmc-core:mmc-block:sdhci:sdhci-pci:sdhci-acpi:usb-storage:hid:usbhid:i2c-hid:hid-generic:hid-apple:hid-asus:hid-cherry:hid-logitech:hid-logitech-dj:hid-logitech-hidpp:hid-lenovo:hid-microsoft:hid_multitouch:jbd2:mbcache:crc32c-intel:ext3:ext4:isofs:fat:nls_cp437:nls_iso8859-1:msdos:vfat:ntfs"
moduleslist="loop:xhci-pci:ohci-pci:ehci-pci:xhci-hcd:uhci-hcd:ehci-hcd:mmc-core:mmc-block:sdhci:sdhci-pci:sdhci-acpi:usb-storage:hid:usbhid:i2c-hid:hid-generic:hid-apple:hid-asus:hid-cherry:hid-logitech:hid-logitech-dj:hid-logitech-hidpp:hid-lenovo:hid-microsoft:hid_multitouch:mptbase:mptscsih:mptspi:jbd2:mbcache:crc32c_intel:crc32c_generic:fuse:ext2:ext3:ext4:xfs:reiserfs:jfs:btrfs:isofs:fat:nls_cp437:nls_iso8859-1:msdos:vfat:ntfs"

#clear
#packages_dir contain packages.txz
packagesdirectory=$startdir/packages_dir
mkdir -p $packagesdirectory
sudo slapt-get --clean
sudo slapt-get -u
if [ "$flagr" == "generic" ]; then
	if [ `uname -m` == "x86_64" ]; then
		slapt-get -i --reinstall -d kernel-headers kernel-generic
	else
		slapt-get -i --reinstall -d kernel-headers kernel-generic
	fi
fi

if [ `uname -m` == "x86_64" ]; then
	cp `find /var/slapt-get/ -type f -name "kernel-headers*"` $packagesdirectory
	if [ "$flagr" == "generic" ]; then
		cp `find /var/slapt-get/ -type f -name "kernel-generic*"` $packagesdirectory
	fi	
	
	if [ "$flagr" == "generic" ]; then
		cd $packagesdirectory
		f=`ls kernel-generic*.txz`
		kv=`echo $f | cut -d'-' -f 3`
		cd $startdir
	fi
else
	cp `find /var/slapt-get/ -type f -name "kernel-headers*"` $packagesdirectory
	if [ "$flagr" == "generic" ]; then
		cp `find /var/slapt-get/ -type f -name "kernel-generic*"` $packagesdirectory
	fi
	
	if [ "$flagr" == "generic" ]; then
		cd $packagesdirectory
		f=`ls kernel-generic*.txz`
		kv=`echo $f | cut -d'-' -f 3`
		cd $startdir
	fi
fi

if [ -f /etc/lsb-release ]; then
	sed -i "s/DISTRIB_DESCRIPTION=.*/DISTRIB_DESCRIPTION='Slackel Linux $kv'/" /etc/lsb-release
fi

if [ "$flag" == "install" ]; then
	installpkg $packagesdirectory/*
	#kv=`ls -l /boot/vmlinuz | cut -f2 -d'>' | sed s/^[^0-9]*//`
	kv=`ls -l /boot/vmlinuz | cut -f2 -d'>' | cut -f2 -d'-'`
	if [ "$flagr" == "generic" ]; then
		echo "creating /boot/initrd-${kv}-${flagr}.gz"
		mkinitrd -c -o /boot/initrd-${kv}-generic.gz -k $kv -f ext4 -m $moduleslist >/dev/null 2>&1
		rm -rf /boot/initrd-tree/
	else
		rm 	/boot/initrd*.gz >/dev/null 2>&1
	fi
	rm /boot/vmlinuz-huge /boot/vmlinuz-huge-smp /boot/vmlinuz-generic >/dev/null 2>&1
	if [ -f /usr/sbin/update-grub ]; then
		echo "updating grub"
		update-grub
	fi 
	rm -rf $packagesdirectory
elif [ "$flag" == "upgrade" ]; then
	upgradepkg $packagesdirectory/*
	#kv=`ls -l /boot/vmlinuz | cut -f2 -d'>' | sed s/^[^0-9]*//`
	kv=`ls -l /boot/vmlinuz | cut -f2 -d'>' | cut -f2 -d'-'`
	if [ "$flagr" == "generic" ];then
		echo "creating /boot/initrd-${kv}-${flagr}.gz"
		mkinitrd -c -o /boot/initrd-${kv}-generic.gz -k $kv -f ext4 -m $moduleslist >/dev/null 2>&1
		rm -rf /boot/initrd-tree/
	else
		rm 	/boot/initrd*.gz >/dev/null 2>&1
	fi
	rm /boot/vmlinuz-huge /boot/vmlinuz-huge-smp /boot/vmlinuz-generic >/dev/null 2>&1

	if [ -f /usr/sbin/update-grub ]; then
		echo "updating grub"
		update-grub
	fi  
	rm -rf $packagesdirectory
fi
}

init
checkoptions $@
execute_script
